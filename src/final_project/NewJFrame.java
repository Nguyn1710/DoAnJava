/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package final_project;

import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;
//import sun.jvm.hotspot.debugger.cdbg.Sym;
import vn.pipeline.Annotation;
import vn.pipeline.VnCoreNLP;
import vn.pipeline.Word;

/**
 *
 * @author Hương Trà
 */
public class NewJFrame extends javax.swing.JFrame {

        // Extract words from annotation
    List<WordPosition> nounWords = new ArrayList<>();
    List<WordPosition> verbWords = new ArrayList<>();
    List<WordPosition> adjWords = new ArrayList<>();
    // Extract words from annotation
    List<WordPosition> wordsWithPositions = new ArrayList<>();
    
    public NewJFrame() {
        initComponents();
        areaInput.setEditable(false);
    }

    public void highlighter(String word, String POS ,int vt) {
        Highlighter hl = areaInput.getHighlighter();
        hl.removeAllHighlights();

        String text = areaInput.getText();
        int index = text.indexOf(word,vt);
        if (index >= vt) {
            try {
                Highlighter.HighlightPainter painter;
                if ("N".equals(POS)) {
                    painter = new DefaultHighlighter.DefaultHighlightPainter(Color.RED); // Màu tomato
                } else if ("V".equals(POS)) {
                    painter = new DefaultHighlighter.DefaultHighlightPainter(Color.GREEN); // Màu xanh lá
                } else {
                    painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW); // Màu mặc định
                }
                hl.addHighlight(index, index + word.length(), painter);
                
            } catch (BadLocationException ex) {
                ex.printStackTrace();
            }
        }
    }

    public void findWord(JTextComponent text, List<String> patterns) {
        try {
            // Get the document and its text
            Document doc = text.getDocument();
            String txt = doc.getText(0, doc.getLength());
            Highlighter highlighter = text.getHighlighter();
            Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);

            // Remove previous highlights
            highlighter.removeAllHighlights();

            // Highlight each pattern
            for (String pattern : patterns) {
                int pos = 0;
                while ((pos = txt.toUpperCase().indexOf(pattern.toUpperCase(), pos)) >= 0) {
                    int end = pos + pattern.length();
                    highlighter.addHighlight(pos, end, painter);
                    pos = end;
                }
            }
        } catch (Exception e) {
            e.printStackTrace(); // Handle the exception, e.g., log it
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnChuyenDoi = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        areaOutput = new javax.swing.JTextArea();
        btnChonFile = new javax.swing.JButton();
        txtTenFile = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        areaInput = new javax.swing.JTextArea();
        btnSave1 = new javax.swing.JButton();
        btnSave2 = new javax.swing.JButton();
        btnSave3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnChuyenDoi.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnChuyenDoi.setForeground(new java.awt.Color(0, 153, 255));
        btnChuyenDoi.setText("=>");
        btnChuyenDoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChuyenDoiActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(0, 102, 255));
        btnSave.setFont(new java.awt.Font("HP Simplified Jpan", 0, 18)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Highlight all");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jButton5.setText("Chọn File");

        areaOutput.setColumns(20);
        areaOutput.setRows(5);
        jScrollPane4.setViewportView(areaOutput);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnChonFile.setText("Chọn File");
        btnChonFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChonFileActionPerformed(evt);
            }
        });

        areaInput.setColumns(20);
        areaInput.setRows(5);
        jScrollPane3.setViewportView(areaInput);

        btnSave1.setBackground(new java.awt.Color(0, 102, 255));
        btnSave1.setFont(new java.awt.Font("HP Simplified Jpan", 0, 18)); // NOI18N
        btnSave1.setForeground(new java.awt.Color(255, 255, 255));
        btnSave1.setText("Highlight A");
        btnSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave1ActionPerformed(evt);
            }
        });

        btnSave2.setBackground(new java.awt.Color(0, 102, 255));
        btnSave2.setFont(new java.awt.Font("HP Simplified Jpan", 0, 18)); // NOI18N
        btnSave2.setForeground(new java.awt.Color(255, 255, 255));
        btnSave2.setText("Highlight V");
        btnSave2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave2ActionPerformed(evt);
            }
        });

        btnSave3.setBackground(new java.awt.Color(0, 102, 255));
        btnSave3.setFont(new java.awt.Font("HP Simplified Jpan", 0, 18)); // NOI18N
        btnSave3.setForeground(new java.awt.Color(255, 255, 255));
        btnSave3.setText("Highlight N");
        btnSave3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnChonFile)
                        .addGap(32, 32, 32)
                        .addComponent(txtTenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnChuyenDoi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnChonFile)
                            .addComponent(txtTenFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(188, 188, 188)
                                .addComponent(btnChuyenDoi, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                                .addComponent(btnSave3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSave2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSave1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChonFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChonFileActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        txtTenFile.setText(filename);
        
        try{
            FileReader reader = new FileReader(filename);
            BufferedReader br = new BufferedReader(reader);
            areaInput.read(br,null);
            br.close();
            areaInput.requestFocus();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
//        ///////////////////////////////////////////////////
//        String[] annotators = {"wseg", "pos", "ner", "parse"};
//        VnCoreNLP pipeline = null;
//        try {
//            pipeline = new VnCoreNLP(annotators);
//        } catch (IOException ex) {
//            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        String str = areaInput.getText();
//        Annotation annotation = new Annotation(str);
//        try {
//            pipeline.annotate(annotation);
//        } catch (IOException ex) {
//            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//
//        String text = areaInput.getText();
//        int currentPos = 0;
//        int wordIndex = 0 ;
//
//        
//        for (Word item : annotation.getWords()) {
//            String[] fields = item.toString().split("\t");
//            if (fields.length > 3) {
//                String word = item.getForm();
//                int startPos = text.indexOf(word, currentPos);
//                int endPos = startPos + word.length() - 1;
//                if (startPos != -1) {
//                    switch (fields[2]) {
//                        case "N":
//                        {
//                            WordPosition wordPosition = new WordPosition(wordIndex, "N", startPos, endPos);
//                            nounWords.add(wordPosition);
//                            break;
//                        } 
//                        case "V":
//                        {
//                            WordPosition wordPosition = new WordPosition(wordIndex, "V", startPos, endPos);                            
//                            verbWords.add(wordPosition);
//                            break;
//                        }                           
//                        case "A":
//                        {
//                            WordPosition wordPosition = new WordPosition(wordIndex, "A", startPos, endPos);
//                            adjWords.add(wordPosition);
//                            break;
//                        }   
//                        default:
//                            break;
//                    }
//                    currentPos = endPos + 1; // Update current position to search for next word
//                    wordIndex++; // Increment the word index
//                }
//            }
//        }
        ///////////////////////////////////////////////////////////////
        Utilities uti = new Utilities();
        String str = areaInput.getText();
//        
//        Annotation annotation = new Annotation(str);
//        annotation = uti.PhanTich(str);
        
        uti.PhanTachLoaiTu(str, nounWords, verbWords, adjWords);
    }//GEN-LAST:event_btnChonFileActionPerformed

    
    public void highlighterNoun(List<WordPosition> patterns) {
    Highlighter hl = areaInput.getHighlighter();
    //hl.removeAllHighlights();
    Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);

    for (WordPosition pattern : patterns) {
        
        try {
            int start = pattern.getStartPos();
            int end = pattern.getEndPos() + 1; // End position should be inclusive
            hl.addHighlight(start, end, painter);
        } catch (BadLocationException ex) {
            ex.printStackTrace();
            }
        }
    }
    public void highlighterVerd(List<WordPosition> patterns) {
    Highlighter hl = areaInput.getHighlighter();
    //hl.removeAllHighlights();
    Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.BLUE);

    for (WordPosition pattern : patterns) {
        
        try {
            int start = pattern.getStartPos();
            int end = pattern.getEndPos() + 1; // End position should be inclusive
            hl.addHighlight(start, end, painter);
        } catch (BadLocationException ex) {
            ex.printStackTrace();
            }
        }
    }
    public void highlighterAdj(List<WordPosition> patterns) {
    Highlighter hl = areaInput.getHighlighter();
//    hl.removeAllHighlights();
    Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.RED);

    for (WordPosition pattern : patterns) {
        
        try {
            int start = pattern.getStartPos();
            int end = pattern.getEndPos() + 1; // End position should be inclusive
            hl.addHighlight(start, end, painter);
        } catch (BadLocationException ex) {
            ex.printStackTrace();
            }
        }
    }


    private void btnChuyenDoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChuyenDoiActionPerformed

        String[] annotators = {"wseg", "pos", "ner", "parse"};
        VnCoreNLP pipeline = null;
        try {
            pipeline = new VnCoreNLP(annotators);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        String str = areaInput.getText();
        Annotation annotation = new Annotation(str); 
        try {
            pipeline.annotate(annotation);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


        String text = areaInput.getText();
        int currentPos = 0;
        int wordIndex = 0 ;

        
        for (Word item : annotation.getWords()) {
            String[] fields = item.toString().split("\t");
            if (fields.length > 3) {
                String word = item.getForm();
                int startPos = text.indexOf(word, currentPos);
                int endPos = startPos + word.length() - 1;
                if (startPos != -1) {
                    switch (fields[2]) {
                        case "N":
                        {
                            WordPosition wordPosition = new WordPosition(wordIndex, "N", startPos, endPos);
                            nounWords.add(wordPosition);
                            break;
                        } 
                        case "V":
                        {
                            WordPosition wordPosition = new WordPosition(wordIndex, "V", startPos, endPos);                            
                            verbWords.add(wordPosition);
                            break;
                        }                           
                        case "A":
                        {
                            WordPosition wordPosition = new WordPosition(wordIndex, "A", startPos, endPos);
                            adjWords.add(wordPosition);
                            break;
                        }   
                        default:
                            break;
                    }
                    currentPos = endPos + 1; // Update current position to search for next word
                    wordIndex++; // Increment the word index
                }
            }
        }

        

        // Highlight the extracted words in the input text
        // Set the annotated text to the output area (if needed)
        //areaOutput.setText(areaInput.getText());
       System.out.println(annotation.getRawText());
        // Apply highlights to areaOutput


    }//GEN-LAST:event_btnChuyenDoiActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave1ActionPerformed
        // TODO add your handling code here:
        Highlighter hl = areaInput.getHighlighter();
        hl.removeAllHighlights();
        highlighterAdj(adjWords);
    }//GEN-LAST:event_btnSave1ActionPerformed

    private void btnSave2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave2ActionPerformed
        // TODO add your handling code here:
        Highlighter hl = areaInput.getHighlighter();
        hl.removeAllHighlights();
        highlighterVerd(verbWords);
    }//GEN-LAST:event_btnSave2ActionPerformed

    private void btnSave3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave3ActionPerformed
        // TODO add your handling code here:
        Highlighter hl = areaInput.getHighlighter();
        hl.removeAllHighlights();
        highlighterNoun(nounWords);
    }//GEN-LAST:event_btnSave3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaInput;
    private javax.swing.JTextArea areaOutput;
    private javax.swing.JButton btnChonFile;
    private javax.swing.JButton btnChuyenDoi;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSave1;
    private javax.swing.JButton btnSave2;
    private javax.swing.JButton btnSave3;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField txtTenFile;
    // End of variables declaration//GEN-END:variables
}
